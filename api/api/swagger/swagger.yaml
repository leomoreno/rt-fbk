swagger: '2.0'
info:
  description: This is the v1 of zigzag.
  version: 0.0.1
  title: Zigzag
  contact:
    email: leonardo.moreno@zagalabs.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
host: localhost:10010
basePath: /v1
tags:
  - name: feedback
    description: Feedback operations
    #externalDocs:
      #description: Find out more
      #url: 'http://docs.zigzag.fun/feedback'
  - name: user
    description: User operations
    #externalDocs:
      #description: Find out more
      #url: 'http://docs.zigzag.fun/user'
schemes:
  - http
paths:
  /feedback:
    x-swagger-router-controller: feedback
    post:
      tags:
        - feedback
      summary: Creates a feedback
      description: Sends a feedback from a sender to a receiver and sends a copy to Human Resources
      operationId: addFeedbackWithJson
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              sender:
                description: Slack username of the sender
                type: string
                format: regex
                pattern: ^[a-z0-9][a-z0-9._-]*$
                example: juan
              receiver:
                description: Slack username of the receiver
                type: string
                format: regex
                pattern: ^[a-z0-9][a-z0-9._-]*$
                example: pedro
              type:
                description: Type of feedback
                type: string
                enum:
                  - ':)'
                  - ':('
              message:
                description: Feedback message
                type: string
                maxLength: 140
                example: u so nice!
            required:
              - sender
              - receiver
              - type
              - message
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/Feedback'
        '400':
          description: Validation exception
      security:
        - api_key: []
        - zigzag_auth:
            - 'write:zigzags'
            - 'read:zigzags'
  '/feedback/viaslack':
    x-swagger-router-controller: feedback
    post:
      tags:
        - feedback
      summary: Creates a feedback via Slack
      description: "Sends a feedback from a sender to a receiver and sends a copy to Human Resources. This endpoint is triggered via Slack Commands. Learn more: https://api.slack.com/custom-integrations/slash-commands"
      operationId: createFeedbackViaSlack
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              token:
                description: Token to verify the request came from the Slack team
                type: string
                example: gIkuvaNzQIHg97ATvDxqgjtO
              team_id:
                description: The Slack team ID. Used to verify whether the team_id matches a team that has approved your command for usage.
                type: string
                example: T0001
              team_domain:
                description: The Slack team's domain
                type: string
                example: example
              channel_id:
                description: The ID of the channel the message was sent from
                type: string
                example: C2147483705
              channel_name:
                description: The name of the channel the message was sent from
                type: string
                example: test
              user_id:
                description: The ID of the Slack user that sent the message
                type: string
                example: U2147483697
              user_name:
                description: Slack username of the sender
                type: string
                format: regex
                pattern: ^[a-z0-9][a-z0-9._-]*$
                example: juan
              text:
                description: Text sent by the Slack user. It should contain one user mention and one :) or :( â€“ Also, the stripped-off message should not be longer than 140 characters.
                type: string
                format: slackCommand
                pattern: "^(<@\\w+\\|?\\w+>{1})\\s?((?: +\\:\\) +)|(?: +\\:\\( +))(.{1,140})"
                example: "<@U012ABCDEF|leo> :( don't wake me up at night anymore please!!"
              response_url:
                description: "URL to respond in case you want to provide additional command response messages, or if you're unable to immediately respond to a command within 3000 milliseconds, use the specific `response_url`"
                type: string
                format: uri
                example: https://hooks.slack.com/commands/1234/5678
              # The following are not used but sent by Slack:
              #enterprise_id:
              #  description: The ID of the enterprise (not used)
              #  type: string
              #  example: E0001
              #enterprise_name:
              #  description: The name of the enterprise (not used)
              #  type: string
              #  example: Globular%20Construct%20Inc
            required:
              - token
              - team_id
              - team_domain
              - channel_id
              - channel_name
              - user_id
              - user_name
              - text
              - response_url
      responses:
        '200':
          description: a pet to be returned
          schema:
            $ref: '#/definitions/SlackResponse'
        '400':
          description: Validation exception
  '/feedback/{uuid}':
    x-swagger-router-controller: feedback
    get:
      tags:
        - feedback
      summary: Get feedback details by ID
      description: Returns a Feedback object given an ID
      operationId: getFeedbackById
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: ID of feedback to return
          required: true
          type: string
          format: uuid
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Feedback'
        '400':
          description: Invalid ID supplied
        '404':
          description: Feedback not found
      security:
        - api_key: []
  '/feedback/{uuid}/reply/':
    put:
      tags:
        - feedback
      summary: Updates a feedback with a reply sent from the receiver, sends the reply to the sender and notifies Humar Resources. This can only be triggered by the original receiver.
      description: Returns a Feedback object given an ID
      operationId: replyFeedbackById
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: uuid
          in: path
          description: ID of feedback to return
          required: true
          type: string
          format: uuid
        - name: body
          in: body
          schema:
            description: Feedback reply
            type: string
            maxLength: 140
            example: thanks for the feedback!
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Feedback'
        '400':
          description: Invalid ID supplied
        '404':
          description: Feedback not found
      security:
        - api_key: []
  '/feedback/search/':
    get:
      tags:
        - feedback
      summary: Returns a list of feedback objects
      description: Performs a search and returns the results as a list of feedback objects. If consumers provide a search term, the results will have feedbacks contain The search can be filtered by type, sender and/or receiver and limited to a specific time frame.
      operationId: searchFeedback
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              keyword:
                description: Search term to look for in messages and replies.
                type: string
                example: keyword
              sender:
                description: Slack username of a sender. If provided, the results will only contain with fedbacks sent by this sender.
                type: string
                format: regex
                pattern: ^[a-z0-9][a-z0-9._-]*$
                example: juan
              receiver:
                description: Slack username of a receiver. If provided, the results will only contain fedbacks received by this sender.
                type: string
                format: regex
                pattern: ^[a-z0-9][a-z0-9._-]*$
                example: pedro
              type:
                description: Type of feedback. If provided, the results will only contain this type of fedbacks.
                type: string
                enum:
                  - ':)'
                  - ':('
              fromDate:
                description: If provided, the results will only contain this fedbacks sent.
                type: string
                format: date
                example: '2016-04-20'
              toDate:
                description: If provided, the results will only contain this fedbacks sent.
                type: string
                format: date
                example: '2017-04-20'
              sortBy:
                description: Name of the field to sort by
                type: string
                enum: [created, sender, receiver, message, reply]
                default: created
              sortDirection:
                description: Direction of the sort
                type: string
                enum: [ascendant, descendant]
                default: ascendant
              resultsPerPage:
                description: Number of results per page
                type: integer
                default: 50
                minimum: 1
              page:
                description: Page number
                type: integer
                default: 50
                minimum: 1
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/FeedbackSearchResults'
      security:
        - api_key: []
  /user:
    post:
      tags:
        - user
      summary: Creates a user
      description: Use this to add a new user
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: Created user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        default:
          description: Successful operation
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: ''
      operationId: createUsersWithListInput
      produces:
        - application/xml
        - application/json
      parameters:
        - in: body
          name: body
          description: List of user object
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  '/user/{slackUsername}':
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: readUserByName
      produces:
        - application/xml
        - application/json
      parameters:
        - name: slackUsername
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing.'
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Updates user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: slackUsername
          in: path
          description: name that need to be updated
          required: true
          type: string
        - in: body
          name: body
          description: Updated user object
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
        - application/xml
        - application/json
      parameters:
        - name: slackUsername
          in: path
          description: The name that needs to be deleted
          required: true
          type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  '/report/users':
    get:
      tags:
        - reports
      summary: Generates a report of users given a time frame
      description: The report contains the list of users that sent or received at least one feedback in the specified period with a summary of the number of feedbacks sent or received by type.
      operationId: usersReport
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              fromDate:
                description: Start date of the report. If not provided, the beginning of times is assumed
                type: string
                format: date
              toDate:
                description: End date of the report. If not provided, today's date will be assumed.
                type: string
                format: date
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                uuid:
                  type: string
                  format: uuid
                  example: 4932252f-84ac-4b4c-9ddf-882cf045e6b8
                email:
                  type: string
                  format: email
                  example: juan@example.com
                slackUsername:
                  type: string
                  example: juan
                  format: regex
                  pattern: ^[a-z0-9][a-z0-9._-]*$
                firstName:
                  type: string
                  example: Pedro
                lastName:
                  type: string
                  example: PÃ©rez
                totalPositiveFeedback:
                  type: integer
                totalNegativeFeedback:
                  type: integer
      security:
        - api_key: []
  '/report/feedbacks':
    get:
      tags:
        - reports
      summary: Generates a report of feedbacks given a time frame
      description: The report contains a summary of feedback in a given time frame, grouped by type.
      operationId: feedbackReport
      consumes:
        - application/json
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          schema:
            type: object
            properties:
              fromDate:
                description: Start date of the report. If not provided, the beginning of times is assumed
                type: string
                format: date
              toDate:
                description: End date of the report. If not provided, today's date will be assumed.
                type: string
                format: date
      responses:
        '200':
          description: successful operation
          schema:
            type: object
            properties:
              positiveFeedback:
                type: integer
              negativeFeedback:
                type: integer
      security:
        - api_key: []
  /swagger:
    x-swagger-pipe: swagger_raw
securityDefinitions:
  zigzag_auth:
    type: oauth2
    authorizationUrl: 'http://fdbk.swagger.io/oauth/dialog'
    flow: implicit
    scopes:
      'write:zigzags': modify zigzags in your account
      'read:zigzags': read your zigzags
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  User:
    type: object
    required:
      - uuid
      - slackUsername
    properties:
      uuid:
        type: string
        format: uuid
        example: 4932252f-84ac-4b4c-9ddf-882cf045e6b8
      email:
        type: string
        format: email
        example: juan@example.com
      slackUsername:
        type: string
        example: juan
        format: regex
        pattern: ^[a-z0-9][a-z0-9._-]*$
      firstName:
        type: string
        example: Pedro
      lastName:
        type: string
        example: PÃ©rez
      password:
        type: string
        minLength: 8
        pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$
        example: This is a strong p@ssw0rd
      created:
        type: string
        format: date-time
        example: '2009-11-13T10:39:35Z'
      updated:
        type: string
        format: date-time
        example: '2009-11-13T10:39:35Z'
    xml:
      name: User
  Feedback:
    type: object
    required:
      - sender
      - receiver
      - type
      - message
    properties:
      uuid:
        type: string
        format: uuid
        example: 8932252f-84ac-4b4c-9ddf-882cf045e6b8
      sender:
        $ref: '#/definitions/User'
      receiver:
        $ref: '#/definitions/User'
      type:
        type: string
        enum:
          - :(
          - :)
      message:
        type: string
        maxLength: 140
      reply:
        type: string
        maxLength: 140
      created:
        type: string
        format: date-time
        example: '2009-11-13T10:39:35Z'
      updated:
        type: string
        format: date-time
        example: '2009-11-13T10:39:35Z'
    xml:
      name: zigzag
# @todo: Move to the endpoint definition. Need to find out why the parser won't let me.
  FeedbackSearchResults:
    type: object
    properties:
      totalPages:
        type: integer
        description: Number of total pages
        minimum: 1
        example: 1
      pageNumber:
        type: integer
        description: Current page number
        minimum: 1
        example: 1
        default: 50
      results:
        type: array
        items:
          $ref: '#/definitions/Feedback'
  SlackResponse:
    type: object
    properties:
      response_type:
        type: string
        description: 'By default, the response messages sent to commands will only be visible to the user that issued the command (we call these "ephemeral" messages). However, if you would like the response to be visible to all members of the channel in which the user typed the command, you can add a `response_type` of `in_channel` to the JSON response.'
        example: ephemeral
        enum:
          - ephemeral
          - in_channel
        default: ephemeral
      text:
        description: Actual response
        type: string
        example: Partly cloudy today and tomorrow
      # @todo: define the attachment element
      #attachment:
      #  type: array
      #  items:
#  ApiResponse:
#    type: object
#    properties:
#      code:
#        type: integer
#        format: int32
#      type:
#        type: string
#      message:
#        type: string
externalDocs:
  description: Find out more about zigzag
  url: 'http://docs.zigzag.fun'
